// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import { generateComment } from './generate';
process.removeAllListeners('warning');

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	// console.log('Congratulations, your extension "comment-generator" is now active!');

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json

	// const disposable = vscode.commands.registerCommand('comment-generator.helloWorld', () => {
		// The code you place here will be executed every time your command is executed
		// Display a message box to the user

		// vscode.window.showInformationMessage('Hello World from Comment Generator!');
	// });

	const disposable = vscode.commands.registerCommand('comment-generator.generateComment', async () => {
		const editor = vscode.window.activeTextEditor;
		if (!editor) {
			vscode.window.showErrorMessage('No active text editor found.');
			return;
		}

		const selection = editor.selection;
		const selectedText = editor.document.getText(selection);
		if (!selectedText) {
            vscode.window.showErrorMessage('No code selected!');
            return;
        }
		// vscode.window.showInformationMessage(selectedText);
		try {
            // const comment = "this is a placeholder comment generated by AI"; 
            
            // // insert comment above the selected code
            // const line = selection.start.line;
            // editor.edit(editBuilder => {
            //     editBuilder.insert(new vscode.Position(line, 0), `// ${comment}\n`);
            // });

			vscode.window.withProgress({
				location: vscode.ProgressLocation.Notification,
				title: "Generating comment",
				cancellable: false
			}, async () =>{
				const comment = await generateComment(selectedText);
				const line = selection.start.line;
				editor.edit(editBuilder => {
					editBuilder.insert(new vscode.Position(line, 0), `// ${comment}\n`);
				});
				vscode.window.showInformationMessage('Comment generated successfully!');
			})

        } catch (error) {
            vscode.window.showErrorMessage('Failed to generate comment: ' + error);
        }
	});

	const improveComment = vscode.commands.registerCommand('comment-generator.improveComment', async () => {
		const editor = vscode.window.activeTextEditor;
		if (!editor) {
			vscode.window.showErrorMessage('No active text editor found.');
			return;
		}	
		const selection = editor.selection;
		const selectedText = editor.document.getText(selection);
		if (!selectedText) {
            vscode.window.showErrorMessage('No code selected!');
            return;
        }
		try{
			// const improvedComment = "this is an improved comment generated by AI"; 
			
			// // Replace the selected text with the improved comment
			// editor.edit(editBuilder => {
			// 	editBuilder.replace(selection, `// ${improvedComment}`);
			// });
			// vscode.window.showInformationMessage('Comment improved successfully!');

			vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: "Improving comment...",
                cancellable: false
            }, async () => {
                const improvedComment = await generateComment(`Improve this comment: ${selectedText}`);
                editor.edit(editBuilder => {
                    editBuilder.replace(selection, `// ${improvedComment}`);
                });
            });

		}catch (error) {
			vscode.window.showErrorMessage('Failed to improve comment: ' + error);
		}
	});
	

	context.subscriptions.push(disposable);
}

// This method is called when your extension is deactivated
export function deactivate() {}
